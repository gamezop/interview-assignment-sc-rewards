// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package repo

import (
	"context"

	"github.com/google/uuid"
)

const createRewardPayout = `-- name: CreateRewardPayout :one
INSERT INTO reward_payout (
    status, sc_id
) VALUES (
    $1, $2
)
RETURNING id, order_id, status, sc_id
`

type CreateRewardPayoutParams struct {
	Status OrderStatus
	ScID   uuid.UUID
}

func (q *Queries) CreateRewardPayout(ctx context.Context, arg CreateRewardPayoutParams) (RewardPayout, error) {
	row := q.db.QueryRowContext(ctx, createRewardPayout, arg.Status, arg.ScID)
	var i RewardPayout
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Status,
		&i.ScID,
	)
	return i, err
}

const getRewardPayoutByOrderId = `-- name: GetRewardPayoutByOrderId :one
SELECT id, order_id, status, sc_id FROM reward_payout
WHERE order_id = $1 LIMIT 1
`

func (q *Queries) GetRewardPayoutByOrderId(ctx context.Context, orderID uuid.UUID) (RewardPayout, error) {
	row := q.db.QueryRowContext(ctx, getRewardPayoutByOrderId, orderID)
	var i RewardPayout
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Status,
		&i.ScID,
	)
	return i, err
}

const getRewardPayoutByScratchId = `-- name: GetRewardPayoutByScratchId :one
SELECT id, order_id, status, sc_id FROM reward_payout
WHERE sc_id = $1 LIMIT 1
`

func (q *Queries) GetRewardPayoutByScratchId(ctx context.Context, scID uuid.UUID) (RewardPayout, error) {
	row := q.db.QueryRowContext(ctx, getRewardPayoutByScratchId, scID)
	var i RewardPayout
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Status,
		&i.ScID,
	)
	return i, err
}

const updateRewardPayoutStatus = `-- name: UpdateRewardPayoutStatus :exec
UPDATE reward_payout 
SET status = $1
WHERE order_id = $2
`

type UpdateRewardPayoutStatusParams struct {
	Status  OrderStatus
	OrderID uuid.UUID
}

func (q *Queries) UpdateRewardPayoutStatus(ctx context.Context, arg UpdateRewardPayoutStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateRewardPayoutStatus, arg.Status, arg.OrderID)
	return err
}
